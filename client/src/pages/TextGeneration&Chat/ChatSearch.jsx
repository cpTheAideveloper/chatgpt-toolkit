//GPT/gptcore/client/src/pages/TextGeneration&Chat/ChatSearch.jsx
import { useState, useRef, useEffect } from "react";
import { LoadingIndicator } from "@/components/LoadingIndicator";
import { Banner } from "@/components/Banner";
import { ChatInput } from "@/components/ChatInput";
import { ChatMessage } from "@/components/ChatMessage";
import { SearchSettingsModal } from "@/components/SearchSettingsModal"; // Custom Modal Component

// Modern Web-Search Chat Interface
export function ChatSearch() {
  const [input, setInput] = useState("");
  const [messages, setMessages] = useState([]);
  const [loading, setLoading] = useState(false);
  const [showBanner, setShowBanner] = useState(true);
  const [showSettings, setShowSettings] = useState(false);

  // Search configuration
  const [searchSize, setSearchSize] = useState("medium");
  const [systemInstructions, setSystemInstructions] = useState(
    "You are a helpful assistant with access to web search. Provide accurate and up-to-date information based on search results."
  );

  const messagesEndRef = useRef(null);
  const chatContainerRef = useRef(null);

  // Auto-scroll on new messages
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  // Hide banner on first message
  useEffect(() => {
    if (messages.length > 0) {
      setShowBanner(false);
    }
  }, [messages]);

  // Lock body scroll when modal is open
  useEffect(() => {
    if (showSettings) {
      document.body.classList.add("overflow-hidden");
    } else {
      document.body.classList.remove("overflow-hidden");
    }

    return () => {
      document.body.classList.remove("overflow-hidden");
    };
  }, [showSettings]);

  const sendMessage = async () => {
    const trimmed = input.trim();
    if (!trimmed) return;

    if (showBanner) setShowBanner(false);

    const userMessage = { role: "user", content: trimmed };
    setMessages((prev) => [...prev, userMessage]);
    setInput("");
    setLoading(true);

    try {
      const res = await fetch("http://localhost:8000/search", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          userInput: trimmed,
          searchSize: searchSize,
          systemInstructions: systemInstructions,
        }),
      });

      if (!res.ok) {
        throw new Error(`Server returned ${res.status}`);
      }

      const data = await res.json();
      setMessages((prev) => [...prev, data]);
    } catch (error) {
      console.error("Error sending message:", error);
      setMessages((prev) => [
        ...prev,
        {
          role: "assistant",
          content: "An error occurred while processing your search query.",
        },
      ]);
    } finally {
      setLoading(false);
    }
  };

  const toggleSettings = () => {
    setShowSettings(!showSettings);
  };

  const saveSettings = () => {
    setShowSettings(false);
  };

  return (
    <div className="relative flex flex-col w-full h-screen bg-gray-50 dark:bg-gray-900">
      {/* Modal */}
      <SearchSettingsModal
        isOpen={showSettings}
        onClose={toggleSettings}
        title="Search Settings"
        searchSize={searchSize}
        setSearchSize={setSearchSize}
        systemInstructions={systemInstructions}
        setSystemInstructions={setSystemInstructions}
        onSave={saveSettings}
      />

      {/* Chat Container */}
      <div ref={chatContainerRef} className="flex-1 overflow-auto px-4 py-6 space-y-6">
        {/* Welcome Banner */}
        {showBanner && (
          <div className="max-w-2xl mx-auto">
            <Banner
              title="Web-Powered AI Search"
              description="Ask me anything! I can search the web to provide you with up-to-date information and answers to your questions."
            />
          </div>
        )}

        {/* Messages */}
        <div className="max-w-2xl mx-auto space-y-6">
          {messages.map((msg, index) => (
            <ChatMessage key={index} message={msg} />
          ))}

          {loading && <LoadingIndicator />}
          <div ref={messagesEndRef} />
        </div>
      </div>

      {/* Input Area */}
      <ChatInput
        input={input}
        setInput={setInput}
        sendMessage={sendMessage}
        onOpenSettings={toggleSettings}
        isLoading={loading}
      />
    </div>
  );
}

/**
 * ChatSearch.jsx
 *
 * This component provides a real-time AI chat interface backed by web search.
 * It enables users to ask questions and receive answers generated by an AI model
 * with access to recent or external web-based data, configurable via a custom settings modal.
 *
 * Key Features:
 * - Full-screen chat interface with animated scrolling
 * - Adjustable search depth and system instructions
 * - Modal for configuring AI search behavior
 * - Dynamic welcome banner and auto-hide
 * - Graceful error handling and feedback
 *
 * Props: None
 *
 * Dependencies:
 * - `ChatInput` for user input and settings toggle
 * - `ChatMessage` for displaying AI and user messages
 * - `SearchSettingsModal` for configuration
 * - `Banner` and `LoadingIndicator` for UI enhancements
 *
 * Path: //GPT/gptcore/client/src/pages/TextGeneration&Chat/ChatSearch.jsx
 */
